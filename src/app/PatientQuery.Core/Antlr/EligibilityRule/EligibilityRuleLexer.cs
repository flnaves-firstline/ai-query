//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Coding\fhir_omop_frontend\PatientQuery.Core\Antlr\EligibilityRule\EligibilityRule.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;

using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EligibilityRuleLexer : Lexer
{
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0 = 1, T__1 = 2, T__2 = 3, AND = 4, OR = 5, WORDS = 6, STRING = 7, SPACE = 8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "AND", "OR", "WORDS", "STRING", "SPACE", "ESC",
		"UNICODE", "HEX"
	};


	public EligibilityRuleLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EligibilityRuleLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "' AND '", "' OR '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "AND", "OR", "WORDS", "STRING", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EligibilityRule.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EligibilityRuleLexer()
	{
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++)
		{
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x2', '\n', 'J', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4',
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5',
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t',
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t',
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3',
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5',
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6',
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6',
		'\a', ',', '\n', '\a', '\r', '\a', '\xE', '\a', '-', '\x3', '\b', '\x3',
		'\b', '\x3', '\b', '\a', '\b', '\x33', '\n', '\b', '\f', '\b', '\xE',
		'\b', '\x36', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3',
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n',
		'\x5', '\n', '\x41', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v',
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x2',
		'\x2', '\r', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v',
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\x2', '\x15', '\x2',
		'\x17', '\x2', '\x3', '\x2', '\a', '\x4', '\x2', '\"', '\"', '\x63', '|',
		'\x4', '\x2', '$', '$', '^', '^', '\x5', '\x2', '\v', '\f', '\xF', '\xF',
		'\"', '\"', '\n', '\x2', '$', '$', '\x31', '\x31', '^', '^', '\x64', '\x64',
		'h', 'h', 'p', 'p', 't', 't', 'v', 'v', '\x5', '\x2', '\x32', ';', '\x43',
		'H', '\x63', 'h', '\x2', 'J', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2',
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2',
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2',
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3',
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x3',
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1B', '\x3', '\x2', '\x2',
		'\x2', '\a', '\x1D', '\x3', '\x2', '\x2', '\x2', '\t', '\x1F', '\x3',
		'\x2', '\x2', '\x2', '\v', '%', '\x3', '\x2', '\x2', '\x2', '\r', '+',
		'\x3', '\x2', '\x2', '\x2', '\xF', '/', '\x3', '\x2', '\x2', '\x2', '\x11',
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x13', '=', '\x3', '\x2', '\x2',
		'\x2', '\x15', '\x42', '\x3', '\x2', '\x2', '\x2', '\x17', 'H', '\x3',
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '*', '\x2', '\x2', '\x1A',
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '+', '\x2', '\x2',
		'\x1C', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '<',
		'\x2', '\x2', '\x1E', '\b', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a',
		'\"', '\x2', '\x2', ' ', '!', '\a', '\x43', '\x2', '\x2', '!', '\"', '\a',
		'P', '\x2', '\x2', '\"', '#', '\a', '\x46', '\x2', '\x2', '#', '$', '\a',
		'\"', '\x2', '\x2', '$', '\n', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a',
		'\"', '\x2', '\x2', '&', '\'', '\a', 'Q', '\x2', '\x2', '\'', '(', '\a',
		'T', '\x2', '\x2', '(', ')', '\a', '\"', '\x2', '\x2', ')', '\f', '\x3',
		'\x2', '\x2', '\x2', '*', ',', '\t', '\x2', '\x2', '\x2', '+', '*', '\x3',
		'\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3',
		'\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\xE',
		'\x3', '\x2', '\x2', '\x2', '/', '\x34', '\a', '$', '\x2', '\x2', '\x30',
		'\x33', '\x5', '\x13', '\n', '\x2', '\x31', '\x33', '\n', '\x3', '\x2',
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3',
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34',
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2',
		'\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3',
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '$', '\x2', '\x2', '\x38',
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\t', '\x4', '\x2', '\x2',
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\b', '\t', '\x2', '\x2',
		'<', '\x12', '\x3', '\x2', '\x2', '\x2', '=', '@', '\a', '^', '\x2', '\x2',
		'>', '\x41', '\t', '\x5', '\x2', '\x2', '?', '\x41', '\x5', '\x15', '\v',
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2',
		'\x2', '\x41', '\x14', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a',
		'w', '\x2', '\x2', '\x43', '\x44', '\x5', '\x17', '\f', '\x2', '\x44',
		'\x45', '\x5', '\x17', '\f', '\x2', '\x45', '\x46', '\x5', '\x17', '\f',
		'\x2', '\x46', 'G', '\x5', '\x17', '\f', '\x2', 'G', '\x16', '\x3', '\x2',
		'\x2', '\x2', 'H', 'I', '\t', '\x6', '\x2', '\x2', 'I', '\x18', '\x3',
		'\x2', '\x2', '\x2', '\a', '\x2', '-', '\x32', '\x34', '@', '\x3', '\b',
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
