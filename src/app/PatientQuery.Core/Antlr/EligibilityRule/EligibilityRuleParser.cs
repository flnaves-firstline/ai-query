//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Coding\fhir_omop_frontend\PatientQuery.Core\Antlr\EligibilityRule\EligibilityRule.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EligibilityRuleParser : Parser
{
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0 = 1, T__1 = 2, T__2 = 3, AND = 4, OR = 5, WORDS = 6, STRING = 7, SPACE = 8;
	public const int
		RULE_parse = 0, RULE_orExpr = 1, RULE_andExpr = 2, RULE_expr = 3, RULE_rule = 4;
	public static readonly string[] ruleNames = {
		"parse", "orExpr", "andExpr", "expr", "rule"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "' AND '", "' OR '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "AND", "OR", "WORDS", "STRING", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EligibilityRule.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EligibilityRuleParser()
	{
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++)
		{
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public EligibilityRuleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

	public EligibilityRuleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExprContext orExpr()
		{
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EligibilityRuleParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			IEligibilityRuleVisitor<TResult> typedVisitor = visitor as IEligibilityRuleVisitor<TResult>;
			if (typedVisitor != null)
				return typedVisitor.VisitParse(this);
			else
				return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse()
	{
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 10;
				orExpr();
				State = 11;
				Match(Eof);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExprContext[] andExpr()
		{
			return GetRuleContexts<AndExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExprContext andExpr(int i)
		{
			return GetRuleContext<AndExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(EligibilityRuleParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ITerminalNode OR(int i)
		{
			return GetToken(EligibilityRuleParser.OR, i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			IEligibilityRuleVisitor<TResult> typedVisitor = visitor as IEligibilityRuleVisitor<TResult>;
			if (typedVisitor != null)
				return typedVisitor.VisitOrExpr(this);
			else
				return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr()
	{
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_orExpr);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 13;
				andExpr();
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la == OR)
				{
					{
						{
							State = 14;
							Match(OR);
							State = 15;
							andExpr();
						}
					}
					State = 20;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ExprContext[] expr()
		{
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExprContext expr(int i)
		{
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(EligibilityRuleParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ITerminalNode AND(int i)
		{
			return GetToken(EligibilityRuleParser.AND, i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			IEligibilityRuleVisitor<TResult> typedVisitor = visitor as IEligibilityRuleVisitor<TResult>;
			if (typedVisitor != null)
				return typedVisitor.VisitAndExpr(this);
			else
				return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr()
	{
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_andExpr);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 21;
				expr();
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la == AND)
				{
					{
						{
							State = 22;
							Match(AND);
							State = 23;
							expr();
						}
					}
					State = 28;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExprContext orExpr()
		{
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public RuleContext rule()
		{
			return GetRuleContext<RuleContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			IEligibilityRuleVisitor<TResult> typedVisitor = visitor as IEligibilityRuleVisitor<TResult>;
			if (typedVisitor != null)
				return typedVisitor.VisitExpr(this);
			else
				return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr()
	{
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr);
		try
		{
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
			case T__0:
			EnterOuterAlt(_localctx, 1);
			{
				State = 29;
				Match(T__0);
				State = 30;
				orExpr();
				State = 31;
				Match(T__1);
			}
			break;
			case WORDS:
			EnterOuterAlt(_localctx, 2);
			{
				State = 33;
				rule();
			}
			break;
			default:
			throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext
	{
		public IToken field;
		public IToken @operator;
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORDS() { return GetTokens(EligibilityRuleParser.WORDS); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ITerminalNode WORDS(int i)
		{
			return GetToken(EligibilityRuleParser.WORDS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(EligibilityRuleParser.STRING, 0); }
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			IEligibilityRuleVisitor<TResult> typedVisitor = visitor as IEligibilityRuleVisitor<TResult>;
			if (typedVisitor != null)
				return typedVisitor.VisitRule(this);
			else
				return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule()
	{
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 8, RULE_rule);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 36;
				_localctx.field = Match(WORDS);
				State = 37;
				Match(T__2);
				State = 38;
				_localctx.@operator = Match(WORDS);
				State = 39;
				Match(T__2);
				State = 40;
				_localctx.value = Match(STRING);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x3', '\n', '-', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t',
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6',
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3',
		'\x3', '\x3', '\x3', '\a', '\x3', '\x13', '\n', '\x3', '\f', '\x3', '\xE',
		'\x3', '\x16', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
		'\a', '\x4', '\x1B', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x1E', '\v',
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3',
		'\x5', '\x5', '\x5', '%', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3',
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2',
		'\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', '*',
		'\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x3', '\x2', '\x2',
		'\x2', '\x6', '\x17', '\x3', '\x2', '\x2', '\x2', '\b', '$', '\x3', '\x2',
		'\x2', '\x2', '\n', '&', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5',
		'\x4', '\x3', '\x2', '\r', '\xE', '\a', '\x2', '\x2', '\x3', '\xE', '\x3',
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x14', '\x5', '\x6', '\x4', '\x2',
		'\x10', '\x11', '\a', '\a', '\x2', '\x2', '\x11', '\x13', '\x5', '\x6',
		'\x4', '\x2', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x13', '\x16',
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2',
		'\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x5', '\x3', '\x2',
		'\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1C',
		'\x5', '\b', '\x5', '\x2', '\x18', '\x19', '\a', '\x6', '\x2', '\x2',
		'\x19', '\x1B', '\x5', '\b', '\x5', '\x2', '\x1A', '\x18', '\x3', '\x2',
		'\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A',
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2',
		'\x1D', '\a', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2',
		'\x2', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', '\x2', ' ', '!', '\x5',
		'\x4', '\x3', '\x2', '!', '\"', '\a', '\x4', '\x2', '\x2', '\"', '%',
		'\x3', '\x2', '\x2', '\x2', '#', '%', '\x5', '\n', '\x6', '\x2', '$',
		'\x1F', '\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2',
		'%', '\t', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\b', '\x2', '\x2',
		'\'', '(', '\a', '\x5', '\x2', '\x2', '(', ')', '\a', '\b', '\x2', '\x2',
		')', '*', '\a', '\x5', '\x2', '\x2', '*', '+', '\a', '\t', '\x2', '\x2',
		'+', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', '\x14', '\x1C', '$',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
